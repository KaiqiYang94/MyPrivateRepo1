
const Empty=0
const TaggedBicycle=1
const UntaggedBicycle=2
const TaggedBicycleChecked=3
const UntaggedBicycleChecked=4
const TaggedBicycleInspected=5
const UntaggedBicycleInspected=6

range Bicycles = TaggedBicycle..UntaggedBicycleInspected
range Segment =Empty..UntaggedBicycleInspected
range UncheckedBicycles = TaggedBicycle..UntaggedBicycle
range CheckedBicycles = TaggedBicycleChecked..UntaggedBicycleInspected

// the producer can put two kinds of bicycles to the belt
PRODUCER = (put[TaggedBicycle] ->PRODUCER | put[UntaggedBicycle] -> PRODUCER).

// the consumer can took 
CONSUMER = (get[n:CheckedBicycles] -> CONSUMER).

//ROBOT
ROBOT =(
sensorCall ->  offBelt[TaggedBicycleChecked]-> inInspector[TaggedBicycleChecked]->ROBOT
|inspectorCall -> outInspector[UntaggedBicycleInspected]-> fromInspector[UntaggedBicycleInspected]->ROBOT).

//SENSOR
SENSOR = (sensorCheck[TaggedBicycle] -> sensorCall -> SENSOR
		| sensorCheck[UntaggedBicycle] -> SENSOR).

//INSPECTOR
INSPECTOR = INSPECTOR[Empty],
INSPECTOR[b:Segment] = (
when (b == TaggedBicycleChecked) inspect->INSPECTOR[UntaggedBicycleInspected]
|when (b == Empty) inInspector[TaggedBicycleChecked] -> INSPECTOR[TaggedBicycleChecked]
|when (b == UntaggedBicycleInspected) inspectorCall -> outInspector[UntaggedBicycleInspected] -> INSPECTOR[Empty]

).

// initialized status
BELT=BELT[Empty][Empty][Empty][Empty][Empty],
BELT[n0:Segment][n1:Segment][n2:Segment][n3:Segment][n4:Segment]=(

// the bicycle must be checked after the new status been established
when (n2 == TaggedBicycle || n2 == UntaggedBicycle) sensorCheck[n2]-> //BELT[n0][n1][n2][n3][n4]
if (n2 == TaggedBicycle) then BELT[n0][n1][TaggedBicycleChecked][n3][n4]
else if(n2 == UntaggedBicycle) then BELT[n0][n1][UntaggedBicycleChecked][n3][n4]

// 
| when((n2 != TaggedBicycle && n2 != UntaggedBicycle)&& n2 == TaggedBicycleChecked) offBelt[n2] -> BELT[n0][n1][Empty][n3][n4]

// 
| when((n2 != TaggedBicycle && n2 != UntaggedBicycle) && n2 == Empty) 
fromInspector[UntaggedBicycleInspected] -> BELT[n0][n1][UntaggedBicycleInspected][n3][n4]

// the rest of the conditions must assert that the 3rd bicycle has been checked
// bicycles can be put the belt
| when((n2 != TaggedBicycle && n2 != UntaggedBicycle) && n0==Empty) put[n5:UncheckedBicycles]-> BELT[n5][n1][n2][n3][n4]

//Bicycles can be get from the belt
| when((n2 != TaggedBicycle && n2 != UntaggedBicycle) && n4!=Empty) get[n4]->BELT[n0][n1][n2][n3][Empty]

// move when (the last segment is empty and the belt is not empty)
| when((n2 != TaggedBicycle && n2 != UntaggedBicycle && n2 != TaggedBicycleChecked) && n4==Empty 
&& !(n0 == Empty && n1 == Empty && n2 == Empty && n3 == Empty)
) 
move->BELT[Empty][n0][n1][n2][n3] 
// here should followed by the checking* functions and other stuff waiting on the belt 
).

||SYSTEM=(PRODUCER||BELT||CONSUMER||SENSOR||INSPECTOR||ROBOT).
